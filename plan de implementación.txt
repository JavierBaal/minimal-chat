
Paso 1: Configurar el almacenamiento local
javascript

Download

Copy code
1// Crea un archivo src/lib/storage.ts
2export const saveToLocalStorage = (key: string, value: any) => {
3  try {
4    localStorage.setItem(key, JSON.stringify(value));
5    return true;
6  } catch (error) {
7    console.error("Error saving to localStorage:", error);
8    return false;
9  }
10};
11
12export const getFromLocalStorage = (key: string, defaultValue: any = null) => {
13  try {
14    const item = localStorage.getItem(key);
15    return item ? JSON.parse(item) : defaultValue;
16  } catch (error) {
17    console.error("Error getting from localStorage:", error);
18    return defaultValue;
19  }
20};
Paso 2: Implementar la autenticación con PIN
javascript

Download

Copy code
1// Modifica src/components/Sidebar.tsx para usar el almacenamiento local
2
3// Importa las funciones
4import { saveToLocalStorage, getFromLocalStorage } from "@/lib/storage";
5
6// En el componente Sidebar, modifica el estado inicial
7const [isAuthenticated, setIsAuthenticated] = useState(false);
8const [storedPin, setStoredPin] = useState(getFromLocalStorage("securePin", ""));
9
10// Modifica la función handlePinSubmit
11const handlePinSubmit = (pin: string) => {
12  if (!isPinSetup) {
13    // Guarda el PIN con un hash simple (en producción usa bcrypt)
14    const hashedPin = btoa(pin); // Codificación básica, no segura para producción
15    saveToLocalStorage("securePin", hashedPin);
16    setStoredPin(hashedPin);
17    onSetupPin(pin);
18  } else {
19    // Verifica el PIN
20    const hashedPin = btoa(pin);
21    if (hashedPin === storedPin) {
22      setIsAuthenticated(true);
23      setShowPinDialog(false);
24      setShowConfigPanel(true);
25    } else {
26      alert("PIN incorrecto. Inténtalo de nuevo.");
27    }
28  }
29};
Paso 3: Conectar con la API de OpenAI
javascript

Download

Copy code
1// Crea un archivo src/lib/api.ts
2import { getFromLocalStorage } from "./storage";
3
4export const callOpenAI = async (message: string, systemPrompt: string) => {
5  const apiKey = getFromLocalStorage("apiKeys", {}).openAI;
6  
7  if (!apiKey) {
8    throw new Error("No se ha configurado la API key de OpenAI");
9  }
10  
11  try {
12    const response = await fetch("https://api.openai.com/v1/chat/completions", {
13      method: "POST",
14      headers: {
15        "Content-Type": "application/json",
16        "Authorization": `Bearer ${apiKey}`
17      },
18      body: JSON.stringify({
19        model: getFromLocalStorage("selectedModel", "gpt-3.5-turbo"),
20        messages: [
21          { role: "system", content: systemPrompt },
22          { role: "user", content: message }
23        ],
24        temperature: 0.7
25      })
26    });
27    
28    const data = await response.json();
29    
30    if (!response.ok) {
31      throw new Error(data.error?.message || "Error al llamar a la API de OpenAI");
32    }
33    
34    return data.choices[0].message.content;
35  } catch (error) {
36    console.error("Error llamando a OpenAI:", error);
37    throw error;
38  }
39};
Paso 4: Implementar la funcionalidad de chat
javascript

Download

Copy code
1// Modifica src/components/ChatArea.tsx
2
3// Importa las funciones necesarias
4import { callOpenAI } from "@/lib/api";
5import { getFromLocalStorage } from "@/lib/storage";
6
7// Añade estado para manejar la carga
8const [isLoading, setIsLoading] = useState(false);
9
10// Modifica la función handleSendMessage
11const handleSendMessage = async (message: string) => {
12  // Crea un nuevo mensaje del usuario
13  const newMessage: Message = {
14    id: `user-${Date.now()}`,
15    content: message,
16    sender: "user",
17    timestamp: new Date(),
18  };
19
20  // Actualiza los mensajes locales
21  setLocalMessages((prev) => [...prev, newMessage]);
22  
23  // Indica que está cargando
24  setIsLoading(true);
25  
26  try {
27    // Obtén el prompt del sistema
28    const systemPrompt = getFromLocalStorage(
29      "systemPrompt", 
30      "You are a helpful AI assistant. Answer questions accurately and concisely."
31    );
32    
33    // Llama a la API
34    const aiResponse = await callOpenAI(message, systemPrompt);
35    
36    // Crea un nuevo mensaje de la IA
37    const aiMessage: Message = {
38      id: `ai-${Date.now()}`,
39      content: aiResponse,
40      sender: "ai",
41      timestamp: new Date(),
42    };
43    
44    // Actualiza los mensajes locales
45    setLocalMessages((prev) => [...prev, aiMessage]);
46  } catch (error) {
47    // Maneja el error
48    const errorMessage: Message = {
49      id: `error-${Date.now()}`,
50      content: `Error: ${error.message}. Por favor verifica tu configuración de API.`,
51      sender: "ai",
52      timestamp: new Date(),
53    };
54    
55    setLocalMessages((prev) => [...prev, errorMessage]);
56  } finally {
57    setIsLoading(false);
58  }
59};
Paso 5: Guardar y cargar configuraciones
javascript

Download

Copy code
1// Modifica src/components/Sidebar.tsx
2
3// En el componente Sidebar, carga las configuraciones al inicio
4useEffect(() => {
5  // Carga las configuraciones guardadas
6  const savedApiKeys = getFromLocalStorage("apiKeys", { openAI: "", deepSeek: "" });
7  const savedModel = getFromLocalStorage("selectedModel", "gpt-4o");
8  const savedPrompt = getFromLocalStorage(
9    "systemPrompt", 
10    "You are a helpful AI assistant. Answer questions accurately and concisely."
11  );
12  const savedTheme = getFromLocalStorage("theme", "light");
13  
14  setApiKeys(savedApiKeys);
15  setSelectedModel(savedModel);
16  setSystemPrompt(savedPrompt);
17  setTheme(savedTheme);
18  
19  // Aplica el tema
20  document.documentElement.classList.toggle("dark", savedTheme === "dark");
21}, []);
22
23// Modifica las funciones de manejo de cambios
24const handleApiKeysChange = (keys: { openAI: string; deepSeek: string }) => {
25  setApiKeys(keys);
26  saveToLocalStorage("apiKeys", keys);
27};
28
29const handleModelChange = (modelId: string) => {
30  setSelectedModel(modelId);
31  saveToLocalStorage("selectedModel", modelId);
32};
33
34const handleSystemPromptChange = (prompt: string) => {
35  setSystemPrompt(prompt);
36  saveToLocalStorage("systemPrompt", prompt);
37};
38
39const handleThemeChange = (newTheme: "light" | "dark") => {
40  setTheme(newTheme);
41  saveToLocalStorage("theme", newTheme);
42  document.documentElement.classList.toggle("dark", newTheme === "dark");
43};
Paso 6: Implementar la base de conocimiento
javascript

Download

Copy code
1// Crea un archivo src/lib/knowledgeBase.ts
2import { saveToLocalStorage, getFromLocalStorage } from "./storage";
3
4export interface KnowledgeFile {
5  id: string;
6  name: string;
7  type: string;
8  size: number;
9  content: string;
10  dateAdded: Date;
11}
12
13export const saveFile = async (file: File): Promise<KnowledgeFile> => {
14  return new Promise((resolve, reject) => {
15    const reader = new FileReader();
16    
17    reader.onload = (event) => {
18      try {
19        const content = event.target?.result as string;
20        const fileType = file.name.split('.').pop()?.toLowerCase() || '';
21        
22        const knowledgeFile: KnowledgeFile = {
23          id: `file-${Date.now()}`,
24          name: file.name,
25          type: fileType,
26          size: file.size,
27          content,
28          dateAdded: new Date()
29        };
30        
31        // Obtén los archivos existentes
32        const existingFiles = getFromLocalStorage("knowledgeFiles", []);
33        
34        // Añade el nuevo archivo
35        const updatedFiles = [...existingFiles, knowledgeFile];
36        
37        // Guarda los archivos actualizados
38        saveToLocalStorage("knowledgeFiles", updatedFiles);
39        
40        resolve(knowledgeFile);
41      } catch (error) {
42        reject(error);
43      }
44    };
45    
46    reader.onerror = () => {
47      reject(new Error("Error al leer el archivo"));
48    };
49    
50    reader.readAsText(file);
51  });
52};
53
54export const deleteFile = (fileId: string): boolean => {
55  try {
56    // Obtén los archivos existentes
57    const existingFiles = getFromLocalStorage("knowledgeFiles", []);
58    
59    // Filtra el archivo a eliminar
60    const updatedFiles = existingFiles.filter(
61      (file: KnowledgeFile) => file.id !== fileId
62    );
63    
64    // Guarda los archivos actualizados
65    saveToLocalStorage("knowledgeFiles", updatedFiles);
66    
67    return true;
68  } catch (error) {
69    console.error("Error al eliminar el archivo:", error);
70    return false;
71  }
72};
73
74export const getFiles = (): KnowledgeFile[] => {
75  return getFromLocalStorage("knowledgeFiles", []);
76};
Paso 7: Integrar la base de conocimiento con el chat
javascript

Download

Copy code
1// Modifica src/lib/api.ts para incluir la base de conocimiento
2
3import { getFiles } from "./knowledgeBase";
4
5export const callOpenAIWithKnowledge = async (message: string, systemPrompt: string) => {
6  const apiKey = getFromLocalStorage("apiKeys", {}).openAI;
7  
8  if (!apiKey) {
9    throw new Error("No se ha configurado la API key de OpenAI");
10  }
11  
12  // Obtén los archivos de la base de conocimiento
13  const knowledgeFiles = getFiles();
14  
15  // Prepara el contexto con la información de los archivos
16  let context = "";
17  if (knowledgeFiles.length > 0) {
18    // Limita la cantidad de contexto para no exceder los límites de la API
19    const relevantFiles = knowledgeFiles.slice(0, 3); // Limita a 3 archivos
20    
21    context = "Información de referencia:\n\n" + 
22      relevantFiles.map(file => 
23        `[${file.name}]:\n${file.content.substring(0, 1000)}...`
24      ).join("\n\n");
25  }
26  
27  // Prepara el prompt del sistema con el contexto
28  const fullSystemPrompt = context 
29    ? `${systemPrompt}\n\nUtiliza la siguiente información como referencia para responder:\n${context}`
30    : systemPrompt;
31  
32  try {
33    const response = await fetch("https://api.openai.com/v1/chat/completions", {
34      method: "POST",
35      headers: {
36        "Content-Type": "application/json",
37        "Authorization": `Bearer ${apiKey}`
38      },
39      body: JSON.stringify({
40        model: getFromLocalStorage("selectedModel", "gpt-3.5-turbo"),
41        messages: [
42          { role: "system", content: fullSystemPrompt },
43          { role: "user", content: message }
44        ],
45        temperature: 0.7
46      })
47    });
48    
49    const data = await response.json();
50    
51    if (!response.ok) {
52      throw new Error(data.error?.message || "Error al llamar a la API de OpenAI");
53    }
54    
55    return data.choices[0].message.content;
56  } catch (error) {
57    console.error("Error llamando a OpenAI:", error);
58    throw error;
59  }
60};
Paso 8: Actualizar los componentes para usar la base de conocimiento
javascript

Download

Copy code
1// Modifica src/components/KnowledgeBaseManager.tsx
2
3// Importa las funciones necesarias
4import { getFiles, deleteFile } from "@/lib/knowledgeBase";
5
6// Añade estado para los archivos
7const [files, setFiles] = useState<KnowledgeFile[]>(getFiles());
8
9// Actualiza la función handleFileUpload
10const handleFileUpload = async (file: File) => {
11  try {
12    const savedFile = await saveFile(file);
13    setFiles(getFiles());
14    setIsUploading(false);
15  } catch (error) {
16    console.error("Error al subir el archivo:", error);
17    alert("Error al subir el archivo: " + error.message);
18    setIsUploading(false);
19  }
20};
21
22// Actualiza la función handleDeleteFile
23const handleDeleteFile = (fileId: string) => {
24  if (deleteFile(fileId)) {
25    setFiles(getFiles());
26  } else {
27    alert("Error al eliminar el archivo");
28  }
29};
Paso 9: Implementar la selección dinámica de modelos según la API habilitada
javascript

Download

Copy code
1// Modifica src/components/ModelSelector.tsx
2
3// Importa las funciones necesarias
4import { getFromLocalStorage } from "@/lib/storage";
5
6// Añade lógica para filtrar modelos según las API keys disponibles
7const getAvailableModels = () => {
8  const apiKeys = getFromLocalStorage("apiKeys", { openAI: "", deepSeek: "" });
9  
10  let availableModels = [];
11  
12  if (apiKeys.openAI) {
13    availableModels = availableModels.concat([
14      {
15        id: "gpt-4o",
16        name: "GPT-4o",
17        provider: "OpenAI",
18        description: "Most capable model for complex tasks",
19      },
20      {
21        id: "gpt-3.5-turbo",
22        name: "GPT-3.5 Turbo",
23        provider: "OpenAI",
24        description: "Fast and efficient for most tasks",
25      }
26    ]);
27  }
28  
29  if (apiKeys.deepSeek) {
30    availableModels = availableModels.concat([
31      {
32        id: "deepseek-chat",
33        name: "DeepSeek Chat",
34        provider: "DeepSeek",
35        description: "General purpose chat model",
36      },
37      {
38        id: "deepseek-coder",
39        name: "DeepSeek Coder",
40        provider: "DeepSeek",
41        description: "Specialized for code generation and analysis",
42      }
43    ]);
44  }
45  
46  return availableModels.length > 0 ? availableModels : modelOptions;
47};
48
49// Usa los modelos disponibles
50const availableModels = getAvailableModels();
Paso 10: Implementar la persistencia de mensajes
javascript

Download

Copy code
1// Modifica src/components/ChatArea.tsx
2
3// Importa las funciones necesarias
4import { saveToLocalStorage, getFromLocalStorage } from "@/lib/storage";
5
6// Carga los mensajes guardados al inicio
7useEffect(() => {
8  const savedMessages = getFromLocalStorage("chatMessages", []);
9  if (savedMessages.length > 0) {
10    // Convierte las fechas de string a Date
11    const messagesWithDates = savedMessages.map(msg => ({
12      ...msg,
13      timestamp: new Date(msg.timestamp)
14    }));
15    setLocalMessages(messagesWithDates);
16  }
17}, []);
18
19// Guarda los mensajes cuando cambian
20useEffect(() => {
21  if (localMessages.length > 0) {
22    saveToLocalStorage("chatMessages", localMessages);
23  }
24}, [localMessages]);
Consejos adicionales
	1	Seguridad: En una aplicación real, nunca almacenes las API keys en localStorage sin encriptación. Considera usar un backend para manejar las llamadas a la API.
	2	Manejo de errores: Añade más manejo de errores y mensajes de usuario amigables.
	3	Optimización: Implementa debouncing para las llamadas a la API y limita el tamaño de la base de conocimiento.
	4	Mejoras de UX: Añade indicadores de carga, animaciones y feedback visual para las acciones del usuario.
	5	Testing: Prueba cada funcionalidad por separado antes de integrarla.
Recursos adicionales
	•	Documentación de la API de OpenAI
	•	Guía de React sobre efectos y estado
	•	Mejores prácticas de seguridad para aplicaciones web
Espero que este tutorial te ayude a hacer funcional la aplicación. Si tienes dudas específicas sobre alguna parte, no dudes en preguntar.
